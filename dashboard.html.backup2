<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VALID Assessment Dashboard</title>
    <!-- Main Site Styles -->
    <link rel="stylesheet" href="./css/style.css">
    <link rel="stylesheet" href="./css/layout.css">
    <link rel="stylesheet" href="./css/components.css">
    <link rel="stylesheet" href="./css/mobile.css">
    <link rel="stylesheet" href="./css/debug.css">
    <link rel="stylesheet" href="./css/gamification.css">
    <link rel="stylesheet" href="./css/dashboard.css">
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Version Indicator -->
    <div id="versionIndicator" class="version-indicator">
        <span id="versionText">v1.0.0</span>
    </div>

    <!-- Login Screen -->
    <div class="login-container" id="loginScreen">
        <div class="login-card">
            <img src="./img/TVM_ Logo_L.png" alt="The Validated Mind Research Lab" class="login-logo">
            <h1 class="login-title">Welcome Back</h1>
            <p class="login-subtitle">Sign in to access your assessment dashboard</p>
            
            <div class="auth-providers">
                <button class="auth-btn google" onclick="signInWithGoogle()">
                    <i class="fab fa-google"></i>
                    Continue with Google
                </button>
                <button class="auth-btn microsoft" onclick="signInWithMicrosoft()">
                    <i class="fab fa-microsoft"></i>
                    Continue with Microsoft
                </button>
                <button class="auth-btn linkedin" onclick="signInWithLinkedIn()">
                    <i class="fab fa-linkedin"></i>
                    Continue with LinkedIn
                </button>
                
                <div class="divider">
                    <span>or</span>
                </div>
                
                <button class="auth-btn dummy" onclick="signInWithDummy()">
                    <i class="fas fa-user"></i>
                    Demo Login (Dummy Credentials)
                </button>
            </div>
            
            <p style="font-size: 0.875rem; color: #6b7280; margin-top: 2rem;">
                By signing in, you agree to our Terms of Service and Privacy Policy
            </p>
        </div>
    </div>

    <!-- Dashboard Screen -->
    <div class="dashboard-container" id="dashboardScreen">
        <!-- Dashboard Header -->
        <header class="app-header">
            <div class="header-container">
                <div class="logo-section">
                    <img src="./img/TVM_ Logo_L.png" alt="The Validated Mind Logo" class="logo">
                </div>
                <div class="actions-section">
                    <div class="user-info">
                        <i class="fas fa-user-circle"></i>
                        <span id="userEmail">user@example.com</span>
                    </div>
                    <button class="btn secondary" onclick="signOut()">
                        <i class="fas fa-sign-out-alt"></i>
                        Sign Out
                    </button>
                </div>
            </div>
        </header>
        <!-- Navigation Menu (secondary bar) -->
        <nav class="dashboard-nav">
            <div class="nav-container">
                <div class="nav-menu">
                    <a href="#" class="nav-item active" data-section="overviewSection">Overview</a>
                    <a href="#" class="nav-item" data-section="myResultsSection">My Results</a>
                    <a href="#" class="nav-item" data-section="valid360Section">Valid360</a>
                    <a href="#" class="nav-item" data-section="uploadSection">Upload Documents</a>
                    <a href="#" class="nav-item" data-section="teamSection">Team Management</a>
                    <a href="#" class="nav-item" data-section="reportsSection">Reports</a>
                    <a href="#" class="nav-item" data-section="profileSection">My Profile</a>
                </div>
            </div>
        </nav>

        <!-- Dashboard Content -->
        <main class="dashboard-content">
            <!-- Overview Section -->
            <div id="overviewSection" class="dashboard-section">
                <h1>Dashboard Overview</h1>
                <p style="color: #6b7280; margin-bottom: 2rem;">Welcome to your assessment dashboard. Here's an overview of your activity and available assessments.</p>
                <button id="startNewAssessment" class="btn primary" style="margin-bottom: 2rem;">
                    <i class="fas fa-play"></i> Start New Assessment
                </button>
                <div class="dashboard-grid">
                    <!-- VALID Assessment Card -->
                    <div class="dashboard-card">
                        <div class="card-header">
                            <img src="./images/valid-assessment-icon.svg" alt="VALID Assessment" style="width: 48px; height: 48px;">
                            <div>
                                <h3 class="card-title">VALID Assessment</h3>
                                <p class="card-subtitle">Values, Awareness, Lived Experience, Institutional Knowledge, Desire</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="stats-grid">
                                <div class="stat-item">
                                    <div class="stat-number" id="validScore">--</div>
                                    <div class="stat-label">Your Score</div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-number" id="validTime">--</div>
                                    <div class="stat-label">Time Taken</div>
                                </div>
                            </div>
                            <button class="btn primary" onclick="showSection('myResultsSection')">
                                <i class="fas fa-chart-bar"></i> My Results
                            </button>
                        </div>
                    </div>

                    <!-- Valid360 Card -->
                    <div class="dashboard-card">
                        <div class="card-header">
                            <img src="./images/valid360-icon.svg" alt="Valid360" style="width: 48px; height: 48px;">
                            <div>
                                <h3 class="card-title">Valid360</h3>
                                <p class="card-subtitle">Comprehensive feedback from multiple perspectives</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="coming-soon">
                                <i class="fas fa-clock"></i>
                                Coming Soon
                            </div>
                            <p style="color: #6b7280; font-size: 0.875rem; margin-top: 1rem;">
                                Our 360-degree assessment tool is currently in development. 
                                Get comprehensive feedback from peers, managers, and direct reports.
                            </p>
                        </div>
                    </div>

                    <!-- Upload Documents Card -->
                    <div class="dashboard-card">
                        <div class="card-header">
                            <img src="./images/upload-documents-icon.svg" alt="Upload Documents" style="width: 48px; height: 48px;">
                            <div>
                                <h3 class="card-title">Upload Documents</h3>
                                <p class="card-subtitle">Share additional context and materials</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="upload-area" id="uploadArea">
                                <i class="fas fa-cloud-upload-alt" style="font-size: 2rem; color: #6b7280; margin-bottom: 1rem;"></i>
                                <p style="margin-bottom: 1rem;">Drag and drop files here or click to browse</p>
                                <button class="btn secondary" onclick="document.getElementById('fileInput').click()">
                                    <i class="fas fa-folder-open"></i> Choose Files
                                </button>
                                <input type="file" id="fileInput" multiple style="display: none;" onchange="handleFileUpload(event)">
                            </div>
                            <div id="uploadedFiles" style="display: none;">
                                <h4 style="margin-bottom: 0.5rem;">Uploaded Files:</h4>
                                <div id="fileList"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Team Management Card -->
                    <div class="dashboard-card">
                        <div class="card-header">
                            <img src="./images/team-management-icon.svg" alt="Team Management" style="width: 48px; height: 48px;">
                            <div>
                                <h3 class="card-title">Team Management</h3>
                                <p class="card-subtitle">Manage team members and permissions</p>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="coming-soon">
                                <i class="fas fa-clock"></i>
                                Coming Soon
                            </div>
                            <p style="color: #6b7280; font-size: 0.875rem; margin-top: 1rem;">
                                Team management features are currently in development. 
                                Soon you'll be able to invite team members and manage their access.
                            </p>
                        </div>
                    </div>
                </div>
                <!-- Gamification Placeholder (Decision Shuffle) -->
                <div class="dashboard-card gamification-card" style="margin-top: 2.5rem; position: relative;">
                    <div class="gamification-vpts-tracker">
                        <span class="vpts-trophy"><i class="fas fa-trophy"></i></span>
                        <span class="vpts-label">VPTS</span>
                        <span class="vpts-value" id="validationPoints">325</span>
                    </div>
                    <div class="gamification-content">
                        <div class="gamification-left">
                            <h2 class="gamification-title">Decision Shuffle <span class="gamification-badge">Beta</span></h2>
                            <p class="gamification-desc">Earn points and track your decision intelligence!<br><span style="color:#64748b;font-size:1rem;">(3 new prompts every day to build your validation profile)</span></p>
                            <div class="gamification-question">
                                <span class="gamification-question-label">Recognition (2 pts):</span>
                                <span class="gamification-question-text" id="recognitionQuestion">Would you want to see the numbers before buying a $500 gadget?</span>
                            </div>
                            <div class="gamification-question">
                                <span class="gamification-question-label">Comparison (3 pts):</span>
                                <span class="gamification-question-text" id="comparisonQuestion">A product with 1000 five-star reviews vs. one recommended by your best friend?</span>
                            </div>
                            <div class="gamification-question">
                                <span class="gamification-question-label">Speed/Bias (5 pts):</span>
                                <span class="gamification-question-text" id="speedQuestion">Sarah bought the iPhone because all her friends have one. What validation type is this?</span>
                            </div>
                            <div class="gamification-coming-soon">More features, achievements, and question types coming soon!</div>
                        </div>
                        <div class="gamification-right">
                            <div class="gamification-image-placeholder">
                                <i class="fas fa-brain"></i>
                            </div>
                            <div class="gamification-actions">
                                <button class="gamification-btn thumbs-down" title="No">
                                    <i class="fas fa-thumbs-down"></i>
                                </button>
                                <button class="gamification-btn thumbs-up" title="Yes">
                                    <i class="fas fa-thumbs-up"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Results Section -->
            <div id="myResultsSection" class="dashboard-section" style="display: none;">
                <div class="actions-section" style="margin-bottom: 2rem; justify-content: flex-end;">
                    <div class="dropdown">
                        <button class="btn primary dropdown-toggle" id="downloadButton">
                            <svg class="icon" viewBox="0 0 24 24" width="16" height="16">
                                <path fill="currentColor" d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                            </svg>
                            Download
                            <svg class="caret" viewBox="0 0 24 24" width="12" height="12">
                                <path fill="currentColor" d="M7 10l5 5 5-5z"></path>
                            </svg>
                        </button>
                        <div class="dropdown-menu" id="downloadMenu">
                            <button class="dropdown-item" id="printButton">
                                <svg class="icon" viewBox="0 0 24 24" width="16" height="16">
                                    <path fill="currentColor" d="M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z"></path>
                                </svg>
                                Print Report
                            </button>
                            <button class="dropdown-item" id="exportJSONButton">
                                <svg class="icon" viewBox="0 0 24 24" width="16" height="16">
                                    <path fill="currentColor" d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm4 18H6V4h7v5h5v11z"></path>
                                </svg>
                                Export JSON
                            </button>
                            <button class="dropdown-item" id="emailButton">
                                <svg class="icon" viewBox="0 0 24 24" width="16" height="16">
                                    <path fill="currentColor" d="M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path>
                                </svg>
                                Send via Email
                            </button>
                        </div>
                    </div>
                </div>
                <h1>My VALID Results</h1>
                <p style="color: #6b7280; margin-bottom: 2rem;">Your decision-making profile and insights from the VALID assessment.</p>
                
                <!-- Assessment Status -->
                <div class="dashboard-card" id="assessmentStatusCard">
                    <div class="card-header">
                        <h3 class="card-title">Assessment Status</h3>
                    </div>
                    <div class="card-content">
                        <div id="noAssessmentMessage" style="display: none;">
                            <div style="text-align: center; padding: 2rem;">
                                <i class="fas fa-clipboard-list" style="font-size: 3rem; color: #6b7280; margin-bottom: 1rem;"></i>
                                <h3 style="color: #374151; margin-bottom: 0.5rem;">No Assessment Completed</h3>
                                <p style="color: #6b7280; margin-bottom: 1.5rem;">You haven't completed the VALID assessment yet. Take the assessment to see your personalized results.</p>
                                <button class="btn primary" onclick="window.location.href='./index.html'">
                                    <i class="fas fa-play"></i>
                                    Start VALID Assessment
                                </button>
                            </div>
                        </div>
                        
                        <div id="incompleteAssessmentMessage" style="display: none;">
                            <div style="text-align: center; padding: 2rem;">
                                <i class="fas fa-pause-circle" style="font-size: 3rem; color: #f59e0b; margin-bottom: 1rem;"></i>
                                <h3 style="color: #374151; margin-bottom: 0.5rem;">Assessment In Progress</h3>
                                <p style="color: #6b7280; margin-bottom: 1rem;">You have an incomplete assessment. Continue where you left off to see your results.</p>
                                
                                <!-- Progress Bar -->
                                <div style="margin: 1.5rem 0;">
                                    <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                                        <span style="font-size: 0.875rem; color: #6b7280;">Progress</span>
                                        <span style="font-size: 0.875rem; color: #6b7280;" id="progressPercentage">0%</span>
                                    </div>
                                    <div style="background: #e5e7eb; border-radius: 8px; height: 8px; overflow: hidden;">
                                        <div id="progressBar" style="background: linear-gradient(90deg, #f59e0b, #f97316); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
                                    </div>
                                    <div style="margin-top: 0.5rem; font-size: 0.875rem; color: #6b7280;">
                                        <span id="questionsCompleted">0</span> of <span id="totalQuestions">25</span> questions completed
                                    </div>
                                </div>
                                
                                <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                                    <button class="btn primary" onclick="resumeAssessment()">
                                        <i class="fas fa-play"></i>
                                        Resume Assessment
                                    </button>
                                    <button class="btn secondary" onclick="startNewAssessment()">
                                        <i class="fas fa-plus"></i>
                                        Start New
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div id="assessmentResults" style="display: none;">
                            <!-- Results will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Valid360 Section -->
            <div id="valid360Section" class="dashboard-section" style="display: none;">
                <h1>Valid360 Assessment</h1>
                <p style="color: #6b7280; margin-bottom: 2rem;">Comprehensive feedback from multiple perspectives.</p>
                
                <div class="dashboard-card">
                    <div class="coming-soon">
                        <i class="fas fa-tools"></i>
                        <strong>Under Development</strong><br>
                        Our Valid360 assessment tool is currently being built. 
                        This will allow you to gather feedback from peers, managers, and direct reports 
                        to get a comprehensive view of your performance and development areas.
                    </div>
                </div>
            </div>

            <!-- Upload Documents Section -->
            <div id="uploadSection" class="dashboard-section" style="display: none;">
                <h1>Upload Documents</h1>
                <p style="color: #6b7280; margin-bottom: 2rem;">Upload other assessment results to compare with your VALID profile.</p>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <h3 class="card-title">Upload Assessment Documents</h3>
                    </div>
                    <div class="card-content">
                        <div class="upload-area" id="uploadArea">
                            <i class="fas fa-cloud-upload-alt" style="font-size: 2rem; color: #6b7280; margin-bottom: 1rem;"></i>
                            <h4>Drag & Drop Files Here</h4>
                            <p style="color: #6b7280; margin-bottom: 1rem;">or</p>
                            <button class="btn" onclick="document.getElementById('fileInput').click()">
                                <i class="fas fa-folder-open"></i>
                                Browse Files
                            </button>
                            <input type="file" id="fileInput" style="display: none;" multiple accept=".pdf,.doc,.docx,.txt,.json">
                            <p style="font-size: 0.875rem; color: #6b7280; margin-top: 1rem;">
                                Supported formats: PDF, DOC, DOCX, TXT, JSON<br>
                                Max file size: 10MB per file
                            </p>
                        </div>
                        
                        <div id="uploadedDocuments">
                            <h4>Uploaded Documents</h4>
                            <div id="documentsList">
                                <div style="color: #6b7280; text-align: center; padding: 1rem;">
                                    No documents uploaded yet.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Team Management Section -->
            <div id="teamSection" class="dashboard-section" style="display: none;">
                <h1>Team Management</h1>
                <p style="color: #6b7280; margin-bottom: 2rem;">Manage team members and compare VALID results across departments.</p>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <h3 class="card-title">Team Members</h3>
                        <div style="display: flex; gap: 1rem; margin-left: auto;">
                            <select id="departmentFilter" class="form-control" style="width: auto; min-width: 150px;" onchange="filterTeamByDepartment()">
                                <option value="">All Departments</option>
                                <option value="Executive">Executive</option>
                                <option value="Finance">Finance</option>
                                <option value="HR">Human Resources</option>
                                <option value="IT">Information Technology</option>
                                <option value="Marketing">Marketing</option>
                                <option value="Operations">Operations</option>
                                <option value="Sales">Sales</option>
                                <option value="Research">Research</option>
                                <option value="Other">Other</option>
                            </select>
                            <button class="btn btn-small" onclick="addTeamMember()">
                                <i class="fas fa-plus"></i>
                                Add Member
                            </button>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="team-stats" style="display: flex; gap: 2rem; margin-bottom: 1.5rem; padding: 1rem; background: #f9fafb; border-radius: 8px;">
                            <div>
                                <div style="font-size: 1.5rem; font-weight: 700; color: #1f2937;" id="totalMembers">5</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Total Members</div>
                            </div>
                            <div>
                                <div style="font-size: 1.5rem; font-weight: 700; color: #1f2937;" id="totalDepartments">4</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Departments</div>
                            </div>
                            <div>
                                <div style="font-size: 1.5rem; font-weight: 700; color: #1f2937;" id="totalAssessments">12</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Assessments</div>
                            </div>
                            <div>
                                <div style="font-size: 1.5rem; font-weight: 700; color: #1f2937;" id="avgCompletion">85%</div>
                                <div style="font-size: 0.875rem; color: #6b7280;">Avg Completion</div>
                            </div>
                        </div>
                        <div class="team-grid" id="teamGrid">
                            <!-- Team members will be loaded here -->
                        </div>
                    </div>
                </div>
                
                <div class="dashboard-card" style="margin-top: 2rem;">
                    <div class="card-header">
                        <h3 class="card-title">Department Overview</h3>
                    </div>
                    <div class="card-content">
                        <div class="department-grid" id="departmentGrid">
                            <!-- Department breakdown will be loaded here -->
                        </div>
                    </div>
                </div>
                
                <div class="dashboard-card" style="margin-top: 2rem;">
                    <div class="card-header">
                        <h3 class="card-title">Team Comparison</h3>
                    </div>
                    <div class="card-content">
                        <div class="coming-soon">
                            <i class="fas fa-chart-bar"></i>
                            <strong>Team Comparison Charts</strong><br>
                            Compare VALID profiles across your team and departments to identify patterns and opportunities for collaboration.
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reports Section -->
            <div id="reportsSection" class="dashboard-section" style="display: none;">
                <h1>All Reports</h1>
                <p style="color: #6b7280; margin-bottom: 2rem;">View and download all your assessment reports.</p>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <h3 class="card-title">Assessment Reports</h3>
                    </div>
                    <div class="card-content">
                        <div id="reportsPlaceholder" style="color: var(--text-muted); text-align: center; padding: 2rem;">
                            Loading your reports...
                        </div>
                        <div id="reportsTable" style="display: none;"></div>
                    </div>
                </div>
            </div>

            <!-- Profile Section -->
            <div id="profileSection" class="dashboard-section" style="display: none;">
                <div class="profile-grid">
                    <!-- Profile Summary Card -->
                    <div class="profile-summary-card">
                        <div class="profile-avatar">
                            <div class="profile-image-container">
                                <img id="profileImage" src="" alt="Profile" style="display: none; width: 80px; height: 80px; border-radius: 50%; object-fit: cover;">
                                <i id="defaultAvatar" class="fas fa-user-circle" style="font-size: 4rem; color: #0D4E5C;"></i>
                            </div>
                            <div class="profile-image-upload">
                                <label for="profileImageInput" class="upload-btn">
                                    <i class="fas fa-camera"></i>
                                    <span>Upload Photo</span>
                                </label>
                                <input type="file" id="profileImageInput" accept="image/*" style="display: none;">
                            </div>
                        </div>
                        <div class="profile-summary-info">
                            <h3 id="summaryName">&nbsp;</h3>
                            <div id="summaryEmail" class="profile-summary-email">&nbsp;</div>
                            <div id="summaryProvider" class="profile-summary-provider">&nbsp;</div>
                        </div>
                    </div>
                    <!-- Profile Edit Card -->
                    <div class="content-card profile-section">
                        <div class="profile-header">
                            <h2>My Profile</h2>
                            <p class="profile-description">Manage your personal information, demographics, and account settings.</p>
                        </div>
                        <form id="profileForm" class="profile-form">
                            <div class="form-section">
                                <h3 class="form-section-title">
                                    <i class="fas fa-user"></i>
                                    Personal Information
                                </h3>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="name">Full Name</label>
                                        <input type="text" id="name" name="name" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="email">Email Address</label>
                                        <input type="email" id="email" name="email" required>
                                    </div>
                                </div>
                            </div>

                            <div class="form-section">
                                <h3 class="form-section-title">
                                    <i class="fas fa-briefcase"></i>
                                    Professional Information
                                </h3>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="job_title">Job Title</label>
                                        <input type="text" id="job_title" name="job_title" placeholder="e.g., Product Manager">
                                    </div>
                                    <div class="form-group">
                                        <label for="department">Department</label>
                                        <input type="text" id="department" name="department" placeholder="e.g., Product">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="location">Location</label>
                                        <input type="text" id="location" name="location" placeholder="e.g., Austin, TX">
                                    </div>
                                    <div class="form-group">
                                        <label for="role">Role Level</label>
                                        <select id="role" name="role">
                                            <option value="">Please select...</option>
                                            <option value="Individual Contributor">Individual Contributor</option>
                                            <option value="Team Lead">Team Lead</option>
                                            <option value="Manager">Manager</option>
                                            <option value="Director">Director</option>
                                            <option value="VP/C-Suite">VP/C-Suite</option>
                                            <option value="Owner/Founder">Owner/Founder</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="experience">Years of Experience</label>
                                        <select id="experience" name="experience">
                                            <option value="">Please select...</option>
                                            <option value="0-2">0-2 years</option>
                                            <option value="3-5">3-5 years</option>
                                            <option value="6-10">6-10 years</option>
                                            <option value="11-15">11-15 years</option>
                                            <option value="15+">15+ years</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="form-section">
                                <h3 class="form-section-title">
                                    <i class="fas fa-shield-alt"></i>
                                    Account Information
                                </h3>
                                <div class="form-group">
                                    <label>Authentication Provider</label>
                                    <div id="authProvider" class="auth-provider-display"></div>
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i>
                                    Save Changes
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Assessment State Manager -->
    <script src="js/assessment-state-manager.js"></script>
    
    <!-- Assessment Controller -->
    <script src="js/assessment-controller.js?v=2024-01-15-v3"></script>
    
    <!-- Event Handlers -->
    <script src="js/event-handlers.js?v=2024-01-15-v3"></script>
    
    <!-- Assessment Manager -->
    <script src="js/assessment-manager.js"></script>

    <script type="module">
        import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.7/+esm';
        import { questions } from './js/questions-data.js';
        
        const SUPABASE_URL = window.__env__?.SUPABASE_URL || 'https://txqtbblkrqmydkjztaip.supabase.co';
        const SUPABASE_ANON_KEY = window.__env__?.SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // Dummy user for demo
        const dummyUser = {
            id: 'dummy-user-id',
            email: 'demo@validatedmind.com',
            name: 'Demo User'
        };

        // Auth functions
        window.signInWithGoogle = async function() {
            // TODO: Implement Google OAuth
            alert('Google OAuth integration coming soon!');
        };

        window.signInWithMicrosoft = async function() {
            // TODO: Implement Microsoft OAuth
            alert('Microsoft OAuth integration coming soon!');
        };

        window.signInWithLinkedIn = async function() {
            // TODO: Implement LinkedIn OAuth
            alert('LinkedIn OAuth integration coming soon!');
        };

        window.signInWithDummy = function() {
            const demoUser = { 
                email: 'demo@validatedmind.com',
                name: 'Demo User',
                id: 'demo-user-123'
            };
            localStorage.setItem('demoUser', JSON.stringify(demoUser));
            showDashboard(demoUser);
        };

        window.signOut = async function() {
            localStorage.removeItem('demoUser');
            showLogin();
        };

        // Navigation functions
        window.showSection = function(sectionId) {
            console.log('showSection called with:', sectionId);
            
            // Hide all sections
            const sections = document.querySelectorAll('.dashboard-section');
            sections.forEach(section => {
                section.style.display = 'none';
            });

            // Show the selected section
            const selectedSection = document.getElementById(sectionId);
            if (selectedSection) {
                selectedSection.style.display = 'block';
            }

            // Update navigation active state
            const navItems = document.querySelectorAll('.nav-item');
            navItems.forEach(item => {
                item.classList.remove('active');
            });

            // Find and activate the corresponding nav item
            const activeNavItem = document.querySelector(`[data-section="${sectionId}"]`);
            if (activeNavItem) {
                activeNavItem.classList.add('active');
            }

            // Update URL hash to maintain state on refresh
            window.location.hash = sectionId;

            // Scroll to top to show sub-menu navigation
            window.scrollTo({ top: 0, behavior: 'smooth' });

            // Load section-specific data
            if (sectionId === 'overviewSection') {
                loadOverviewData();
            } else if (sectionId === 'myResultsSection') {
                checkAssessmentStatus();
            } else if (sectionId === 'valid360Section') {
                loadValid360Data();
            } else if (sectionId === 'uploadSection') {
                loadUploadedDocuments();
            } else if (sectionId === 'teamSection') {
                loadTeamData();
            } else if (sectionId === 'reportsSection') {
                loadAllReports();
            } else if (sectionId === 'profileSection') {
                loadProfileData();
            }
        };

        // Restore section from URL hash on page load
        function restoreSectionFromHash() {
            const hash = window.location.hash.substring(1); // Remove the # symbol
            if (hash) {
                // Check if the hash corresponds to a valid section
                const validSections = [
                    'overviewSection',
                    'myResultsSection', 
                    'valid360Section',
                    'uploadSection',
                    'teamSection',
                    'reportsSection',
                    'profileSection'
                ];
                
                if (validSections.includes(hash)) {
                    showSection(hash);
                    return;
                }
            }
            
            // Default to overview if no valid hash or no hash
            showSection('overviewSection');
        }

        // Listen for hash changes (back/forward browser buttons)
        window.addEventListener('hashchange', function() {
            restoreSectionFromHash();
        });

        // Load section data
        async function loadSectionData(sectionName) {
            switch(sectionName) {
                case 'myResults':
                    await loadValidAssessments();
                    break;
                case 'reports':
                    await loadAllReports();
                    break;
                case 'overview':
                    await loadOverviewData();
                    break;
                case 'upload':
                    await loadUploadedDocuments();
                    break;
                case 'team':
                    await loadTeamMembers();
                    break;
                case 'profile':
                    await loadProfileData();
                    break;
            }
        }

        // Load VALID assessments
        async function loadValidAssessments() {
            const noAssessmentMessage = document.getElementById('noAssessmentMessage');
            const assessmentResults = document.getElementById('assessmentResults');
            
            try {
                // Check for completed assessments in localStorage
                const completedAssessments = localStorage.getItem('valid_completed_assessments');
                
                if (!completedAssessments) {
                    // No assessment completed
                    noAssessmentMessage.style.display = 'block';
                    assessmentResults.style.display = 'none';
                    return;
                }
                
                const parsedCompleted = JSON.parse(completedAssessments);
                
                if (!Array.isArray(parsedCompleted) || parsedCompleted.length === 0) {
                    // No assessment completed
                    noAssessmentMessage.style.display = 'block';
                    assessmentResults.style.display = 'none';
                    return;
                }
                
                // Get the latest assessment (users can only take one assessment)
                const latestAssessment = parsedCompleted[parsedCompleted.length - 1];
                
                if (!latestAssessment.scores && !latestAssessment.answers) {
                    // No valid assessment data
                    noAssessmentMessage.style.display = 'block';
                    assessmentResults.style.display = 'none';
                    return;
                }
                
                // Display the results
                noAssessmentMessage.style.display = 'none';
                assessmentResults.style.display = 'block';
                
                // Load and display the results
                await displayAssessmentResults(latestAssessment);
                
            } catch (error) {
                console.error('Error loading VALID assessments:', error);
                noAssessmentMessage.style.display = 'block';
                assessmentResults.style.display = 'none';
            }
        }

        async function displayAssessmentResults(assessmentData) {
            const assessmentResults = document.getElementById('assessmentResults');
            
            // Get scores (either from assessment or recalculate from answers)
            let scores = assessmentData.scores;
            let answers = assessmentData.answers;
            let timestamp = assessmentData.timestamp || assessmentData.completed_at;
            
            // If we only have answers, try to recalculate scores
            if (!scores && answers) {
                try {
                    // Import scoring functions
                    const scoringModule = await import('./js/scoring.js');
                    const recalculatedResults = scoringModule.calculateScores(answers, timestamp);
                    scores = recalculatedResults.scores;
                } catch (error) {
                    console.error('Failed to recalculate scores:', error);
                    // Use default scores if recalculation fails
                    scores = { V: 0, A: 0, L: 0, I: 0, D: 0 };
                }
            }
            
            // Calculate primary and secondary styles
            const sortedScores = Object.entries(scores).sort(([,a], [,b]) => b - a);
            const primaryStyle = sortedScores[0];
            const secondaryStyle = sortedScores[1];
            
            // Get dimension names
            const dimensionNames = {
                V: 'Verity (Data-Driven)',
                A: 'Association (Relationship)',
                L: 'Lived Experience',
                I: 'Institutional Knowledge',
                D: 'Desire (Future-Focused)'
            };
            
            const dimensionDescriptions = {
                V: 'You excel in data-driven decision making and analytical problem-solving.',
                A: 'You prioritize relationships and collaborative approaches in decision-making.',
                L: 'You rely on personal experience and practical knowledge.',
                I: 'You leverage organizational knowledge and established systems.',
                D: 'You focus on future possibilities and innovative solutions.'
            };
            
            // Generate insights based on scores
            const insights = generateInsights(scores);
            
            // Format the assessment date
            const assessmentDate = timestamp ? new Date(timestamp).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            }) : 'Unknown date';
            
            // Create the results HTML
            const resultsHTML = `
                <div class="results-container">
                    <!-- Assessment Date -->
                    <div class="assessment-date">
                        <strong>Assessment Completed:</strong> <span>${assessmentDate}</span>
                    </div>
                    
                    <!-- Chart Section -->
                    <div class="chart-section">
                        <h2>Decision-Making Profile</h2>
                        <div class="chart-container">
                            <canvas id="radarChart" width="400" height="400"></canvas>
                        </div>
                    </div>
                    
                    <!-- Scores Section -->
                    <div class="scores-section">
                        <div class="primary-style">
                            <h3>Primary Style: ${dimensionNames[primaryStyle[0]]} <span style="color: #3b82f6;">${Math.round(primaryStyle[1])}%</span></h3>
                            <p>${dimensionDescriptions[primaryStyle[0]]}</p>
                        </div>
                        
                        <div class="secondary-style">
                            <h3>Secondary Style: ${dimensionNames[secondaryStyle[0]]} <span style="color: #6b7280;">${Math.round(secondaryStyle[1])}%</span></h3>
                            <p>${dimensionDescriptions[secondaryStyle[0]]}</p>
                        </div>
                        
                        <div class="dimension-scores">
                            <h3>Dimension Scores</h3>
                            <div class="score-bars">
                                <div class="score-item">
                                    <div class="score-label">
                                        <span>Verity (Data-Driven)</span>
                                        <span class="score-value">${Math.round(scores.V)}%</span>
                                    </div>
                                    <div class="score-bar verity">
                                        <div class="score-bar-fill" style="width: ${scores.V}%"></div>
                                    </div>
                                </div>
                                
                                <div class="score-item">
                                    <div class="score-label">
                                        <span>Association (Relationship)</span>
                                        <span class="score-value">${Math.round(scores.A)}%</span>
                                    </div>
                                    <div class="score-bar association">
                                        <div class="score-bar-fill" style="width: ${scores.A}%"></div>
                                    </div>
                                </div>
                                
                                <div class="score-item">
                                    <div class="score-label">
                                        <span>Lived Experience</span>
                                        <span class="score-value">${Math.round(scores.L)}%</span>
                                    </div>
                                    <div class="score-bar lived">
                                        <div class="score-bar-fill" style="width: ${scores.L}%"></div>
                                    </div>
                                </div>
                                
                                <div class="score-item">
                                    <div class="score-label">
                                        <span>Institutional Knowledge</span>
                                        <span class="score-value">${Math.round(scores.I)}%</span>
                                    </div>
                                    <div class="score-bar institutional">
                                        <div class="score-bar-fill" style="width: ${scores.I}%"></div>
                                    </div>
                                </div>
                                
                                <div class="score-item">
                                    <div class="score-label">
                                        <span>Desire (Future-Focused)</span>
                                        <span class="score-value">${Math.round(scores.D)}%</span>
                                    </div>
                                    <div class="score-bar desire">
                                        <div class="score-bar-fill" style="width: ${scores.D}%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Dimension Boxes -->
                    <div class="dimension-boxes">
                        <div class="dimension-box verity">
                            <h4>Verity</h4>
                            <div class="score">${Math.round(scores.V)}%</div>
                            <p>Data-driven decision making</p>
                        </div>
                        <div class="dimension-box association">
                            <h4>Association</h4>
                            <div class="score">${Math.round(scores.A)}%</div>
                            <p>Relationship building approaches</p>
                        </div>
                        <div class="dimension-box lived">
                            <h4>Lived Experience</h4>
                            <div class="score">${Math.round(scores.L)}%</div>
                            <p>Personal experience integration</p>
                        </div>
                        <div class="dimension-box institutional">
                            <h4>Institutional</h4>
                            <div class="score">${Math.round(scores.I)}%</div>
                            <p>Organizational knowledge</p>
                        </div>
                        <div class="dimension-box desire">
                            <h4>Desire</h4>
                            <div class="score">${Math.round(scores.D)}%</div>
                            <p>Future-focused planning</p>
                        </div>
                    </div>
                    
                    <!-- Insights Section -->
                    <div class="insights-section">
                        <h3>Validation Insights</h3>
                        <div class="recommendations">
                            ${insights.map(insight => `
                                <div class="recommendation ${insight.dimension.toLowerCase()}">
                                    <h4>${insight.title}</h4>
                                    <p>${insight.description}</p>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            `;
            
            assessmentResults.innerHTML = resultsHTML;
            
            // Initialize radar chart
            initializeRadarChart(scores);
        }

        function generateInsights(scores) {
            const insights = [];
            
            // Find the lowest scoring dimensions for development recommendations
            const sortedScores = Object.entries(scores).sort(([,a], [,b]) => a - b);
            const lowestScores = sortedScores.slice(0, 2);
            
            const insightTemplates = {
                A: {
                    title: 'Enhance Relationship Building',
                    description: 'Consider incorporating more collaborative approaches and seeking diverse perspectives in your decision-making process.'
                },
                L: {
                    title: 'Leverage Personal Experience',
                    description: 'Look for opportunities to apply your practical experiences more actively in problem-solving situations.'
                },
                D: {
                    title: 'Balance Future Vision',
                    description: 'While maintaining your analytical strength, try to integrate more future-focused thinking in your planning process.'
                },
                V: {
                    title: 'Strengthen Data Analysis',
                    description: 'Consider developing your analytical skills to make more evidence-based decisions.'
                },
                I: {
                    title: 'Build Institutional Knowledge',
                    description: 'Focus on understanding organizational systems and established practices to enhance your decision-making.'
                }
            };
            
            // Add insights for the lowest scoring dimensions
            lowestScores.forEach(([dimension, score]) => {
                if (score < 70 && insightTemplates[dimension]) {
                    insights.push({
                        dimension,
                        ...insightTemplates[dimension]
                    });
                }
            });
            
            // If no low scores, provide general insights
            if (insights.length === 0) {
                insights.push({
                    dimension: 'A',
                    title: 'Maintain Balance',
                    description: 'Your decision-making profile shows good balance across dimensions. Continue to leverage your strengths while remaining open to different approaches.'
                });
            }
            
            return insights;
        }

        function initializeRadarChart(scores) {
            const canvas = document.getElementById('radarChart');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            
            // Clear any existing chart
            if (window.radarChart) {
                window.radarChart.destroy();
            }
            
            // Create simple radar chart using canvas
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const radius = Math.min(centerX, centerY) - 40;
            
            // Draw background circles
            ctx.strokeStyle = '#e5e7eb';
            ctx.lineWidth = 1;
            for (let i = 1; i <= 5; i++) {
                ctx.beginPath();
                ctx.arc(centerX, centerY, (radius * i) / 5, 0, 2 * Math.PI);
                ctx.stroke();
            }
            
            // Draw dimension lines
            const dimensions = ['V', 'A', 'L', 'I', 'D'];
            const angles = dimensions.map((_, i) => (i * 2 * Math.PI) / dimensions.length - Math.PI / 2);
            
            ctx.strokeStyle = '#d1d5db';
            ctx.lineWidth = 1;
            angles.forEach(angle => {
                ctx.beginPath();
                ctx.moveTo(centerX, centerY);
                ctx.lineTo(
                    centerX + Math.cos(angle) * radius,
                    centerY + Math.sin(angle) * radius
                );
                ctx.stroke();
            });
            
            // Draw data polygon
            ctx.fillStyle = 'rgba(59, 130, 246, 0.2)';
            ctx.strokeStyle = '#3b82f6';
            ctx.lineWidth = 2;
            ctx.beginPath();
            
            dimensions.forEach((dim, i) => {
                const angle = angles[i];
                const score = scores[dim] || 0;
                const pointRadius = (score / 100) * radius;
                const x = centerX + Math.cos(angle) * pointRadius;
                const y = centerY + Math.sin(angle) * pointRadius;
                
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            });
            
            ctx.closePath();
            ctx.fill();
            ctx.stroke();
            
            // Draw dimension labels
            ctx.fillStyle = '#374151';
            ctx.font = '12px Inter, sans-serif';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            dimensions.forEach((dim, i) => {
                const angle = angles[i];
                const labelRadius = radius + 20;
                const x = centerX + Math.cos(angle) * labelRadius;
                const y = centerY + Math.sin(angle) * labelRadius;
                
                const labels = {
                    V: 'Verity',
                    A: 'Association',
                    L: 'Lived',
                    I: 'Institutional',
                    D: 'Desire'
                };
                
                ctx.fillText(labels[dim], x, y);
            });
        }

        // Show/hide functions
        function showDashboard(user) {
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('dashboardScreen').style.display = 'block';
            document.getElementById('userEmail').textContent = user.email;
            
            // Load overview data
            loadOverviewData();
        }

        function showLogin() {
            document.getElementById('loginScreen').style.display = 'flex';
            document.getElementById('dashboardScreen').style.display = 'none';
        }

        // Load overview data
        async function loadOverviewData() {
            console.log('Loading overview data...');
            
            // Check if user has completed assessment
            const completedAssessments = localStorage.getItem('valid_completed_assessments');
            console.log('Completed assessments from localStorage:', completedAssessments);
            
            let hasAssessment = false;
            let latestAssessment = null;
            
            if (completedAssessments) {
                try {
                    const parsed = JSON.parse(completedAssessments);
                    console.log('Parsed completed assessments:', parsed);
                    hasAssessment = Array.isArray(parsed) && parsed.length > 0;
                    if (hasAssessment) {
                        latestAssessment = parsed[parsed.length - 1];
                        console.log('Latest assessment:', latestAssessment);
                    }
                } catch (error) {
                    console.error('Error parsing completed assessments:', error);
                }
            }
            
            // Update VALID Assessment card stats
            const validScoreElement = document.getElementById('validScore');
            const validTimeElement = document.getElementById('validTime');
            
            console.log('Found elements:', {
                validScoreElement: !!validScoreElement,
                validTimeElement: !!validTimeElement
            });
            
            if (validScoreElement && validTimeElement) {
                if (hasAssessment && latestAssessment) {
                    // Calculate primary score (highest dimension)
                    const scores = latestAssessment.scores || {};
                    console.log('Assessment scores:', scores);
                    const primaryScore = Math.max(...Object.values(scores));
                    validScoreElement.textContent = `${Math.round(primaryScore)}%`;
                    
                    // Calculate time taken
                    const startTime = new Date(latestAssessment.startTime || latestAssessment.timestamp);
                    const endTime = new Date(latestAssessment.completedAt || latestAssessment.timestamp);
                    const timeDiff = Math.round((endTime - startTime) / 60000); // minutes
                    validTimeElement.textContent = `${timeDiff} min`;
                    
                    console.log('Updated dashboard stats:', {
                        score: validScoreElement.textContent,
                        time: validTimeElement.textContent
                    });
                } else {
                    validScoreElement.textContent = '--';
                    validTimeElement.textContent = '--';
                    console.log('No assessment data found, showing --');
                }
            } else {
                console.error('Dashboard elements not found');
            }
        }

        // Load all reports
        async function loadAllReports() {
            const placeholder = document.getElementById('reportsPlaceholder');
            const table = document.getElementById('reportsTable');
            
            try {
                // Check for completed assessments
                const completedAssessments = localStorage.getItem('valid_completed_assessments');
                let reports = [];
                
                if (completedAssessments) {
                    try {
                        const parsed = JSON.parse(completedAssessments);
                        if (Array.isArray(parsed) && parsed.length > 0) {
                            const assessment = parsed[parsed.length - 1];
                            reports.push({
                                id: '1',
                                type: 'VALID',
                                email: 'demo@validatedmind.com',
                                completed_at: assessment.timestamp || assessment.completed_at || new Date().toISOString(),
                                demographics: assessment.demographics || { department: 'N/A', role: 'N/A' }
                            });
                        }
                    } catch (error) {
                        console.error('Error parsing completed assessments:', error);
                    }
                }
                
                // Add dummy documents as reports
                reports.push(
                    {
                        id: '2',
                        type: 'MBTI',
                        email: 'demo@validatedmind.com',
                        completed_at: '2024-01-05T09:15:00Z',
                        demographics: { department: 'Research', role: 'Analyst' }
                    }
                );

                if (reports.length === 0) {
                    placeholder.textContent = 'No reports found. Complete assessments to see your reports here.';
                    return;
                }

                const tableHTML = `
                    <table class="reports-table">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Date</th>
                                <th>Email</th>
                                <th>Department</th>
                                <th>Role</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${reports.map(report => `
                                <tr>
                                    <td><span class="badge badge-${report.type.toLowerCase()}">${report.type}</span></td>
                                    <td>${new Date(report.completed_at).toLocaleDateString()}</td>
                                    <td>${report.email}</td>
                                    <td>${report.demographics?.department || 'N/A'}</td>
                                    <td>${report.demographics?.role || 'N/A'}</td>
                                    <td>
                                        <button class="btn btn-small" onclick="downloadReport('${report.id}')">
                                            <i class="fas fa-download"></i> Download
                                        </button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

                placeholder.style.display = 'none';
                table.innerHTML = tableHTML;
                table.style.display = 'block';

            } catch (error) {
                console.error('Error loading reports:', error);
                placeholder.textContent = 'Error loading reports. Please try again.';
            }
        }

        // Load uploaded documents
        async function loadUploadedDocuments() {
            const documentsList = document.getElementById('documentsList');
            
            // For demo, show dummy documents
            const dummyDocuments = [
                { id: '1', name: 'MBTI_Results.pdf', type: 'MBTI', uploaded: '2024-01-12' },
                { id: '2', name: 'Profile_XT_Report.docx', type: 'Profile XT', uploaded: '2024-01-10' }
            ];

            if (dummyDocuments.length === 0) {
                documentsList.innerHTML = '<div style="color: #6b7280; text-align: center; padding: 1rem;">No documents uploaded yet.</div>';
                return;
            }

            const documentsHTML = dummyDocuments.map(doc => `
                <div style="display: flex; align-items: center; justify-content: space-between; padding: 1rem; border: 1px solid #e5e7eb; border-radius: 8px; margin-bottom: 0.5rem;">
                    <div>
                        <div style="font-weight: 600; color: #1f2937;">${doc.name}</div>
                        <div style="font-size: 0.875rem; color: #6b7280;">${doc.type} • Uploaded ${doc.uploaded}</div>
                    </div>
                    <div style="display: flex; gap: 0.5rem;">
                        <button class="btn btn-small" onclick="viewDocument('${doc.id}')">
                            <i class="fas fa-eye"></i> View
                        </button>
                        <button class="btn btn-small btn-secondary" onclick="deleteDocument('${doc.id}')">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `).join('');

            documentsList.innerHTML = documentsHTML;
        }

        // Load team data
        async function loadTeamData() {
            loadTeamManagement();
        }

        // Load profile data
        async function loadProfileData() {
            // For demo, populate with demo user data
            const demoUser = {
                name: 'Demo User',
                email: 'demo@validatedmind.com',
                job_title: 'Research Analyst',
                department: 'Research',
                location: 'San Francisco, CA',
                role: 'Individual Contributor',
                experience: '3-5 years'
            };

            // Populate form fields
            const nameField = document.getElementById('name');
            const emailField = document.getElementById('email');
            const jobTitleField = document.getElementById('job_title');
            const departmentField = document.getElementById('department');
            const locationField = document.getElementById('location');
            const roleField = document.getElementById('role');
            const experienceField = document.getElementById('experience');

            if (nameField) nameField.value = demoUser.name;
            if (emailField) emailField.value = demoUser.email;
            if (jobTitleField) jobTitleField.value = demoUser.job_title;
            if (departmentField) departmentField.value = demoUser.department;
            if (locationField) locationField.value = demoUser.location;
            if (roleField) roleField.value = demoUser.role;
            if (experienceField) experienceField.value = demoUser.experience;

            // Update summary card
            const summaryName = document.getElementById('summaryName');
            const summaryEmail = document.getElementById('summaryEmail');
            if (summaryName) summaryName.textContent = demoUser.name;
            if (summaryEmail) summaryEmail.textContent = demoUser.email;
        }

        // Assessment Status and Resume Functions
        async function checkAssessmentStatus() {
            const noAssessmentMessage = document.getElementById('noAssessmentMessage');
            const incompleteAssessmentMessage = document.getElementById('incompleteAssessmentMessage');
            const assessmentResults = document.getElementById('assessmentResults');
            
            try {
                // Check for completed assessments first
                const completedAssessments = localStorage.getItem('valid_completed_assessments');
                if (completedAssessments) {
                    const parsed = JSON.parse(completedAssessments);
                    if (Array.isArray(parsed) && parsed.length > 0) {
                        // Show completed results
                        noAssessmentMessage.style.display = 'none';
                        incompleteAssessmentMessage.style.display = 'none';
                        assessmentResults.style.display = 'block';
                        await displayAssessmentResults(parsed[parsed.length - 1]);
                        return;
                    }
                }
                
                // Check for incomplete assessment
                const currentAssessment = localStorage.getItem('valid_current_assessment');
                if (currentAssessment) {
                    const assessment = JSON.parse(currentAssessment);
                    if (assessment && assessment.status !== 'completed') {
                        // Show incomplete assessment with progress
                        noAssessmentMessage.style.display = 'none';
                        incompleteAssessmentMessage.style.display = 'block';
                        assessmentResults.style.display = 'none';
                        updateProgressDisplay(assessment);
                        return;
                    }
                }
                
                // Check for saved progress
                const progressData = localStorage.getItem('valid_assessment_progress');
                if (progressData) {
                    const progress = JSON.parse(progressData);
                    const latestProgress = Object.values(progress).sort((a, b) => b.timestamp - a.timestamp)[0];
                    if (latestProgress && latestProgress.expiresAt > Date.now()) {
                        // Show incomplete assessment with progress
                        noAssessmentMessage.style.display = 'none';
                        incompleteAssessmentMessage.style.display = 'block';
                        assessmentResults.style.display = 'none';
                        updateProgressDisplay(latestProgress.state);
                        return;
                    }
                }
                
                // No assessment found
                noAssessmentMessage.style.display = 'block';
                incompleteAssessmentMessage.style.display = 'none';
                assessmentResults.style.display = 'none';
                
            } catch (error) {
                console.error('Error checking assessment status:', error);
                noAssessmentMessage.style.display = 'block';
                incompleteAssessmentMessage.style.display = 'none';
                assessmentResults.style.display = 'none';
            }
        }

        function updateProgressDisplay(assessment) {
            const totalQuestions = questions.length; // Total VALID assessment questions
            const currentQuestion = assessment.currentQuestion || assessment.currentQuestionIndex || 0;
            const answers = assessment.answers || {};
            const answeredQuestions = Object.keys(answers).length;
            
            const progressPercentage = Math.round((answeredQuestions / totalQuestions) * 100);
            
            const progressPercentageEl = document.getElementById('progressPercentage');
            const progressBarEl = document.getElementById('progressBar');
            const questionsCompletedEl = document.getElementById('questionsCompleted');
            const totalQuestionsEl = document.getElementById('totalQuestions');
            
            if (progressPercentageEl) progressPercentageEl.textContent = `${progressPercentage}%`;
            if (progressBarEl) progressBarEl.style.width = `${progressPercentage}%`;
            if (questionsCompletedEl) questionsCompletedEl.textContent = answeredQuestions;
            if (totalQuestionsEl) totalQuestionsEl.textContent = totalQuestions;
        }

        function resumeAssessment() {
            // Set resume flag and redirect to assessment
            assessmentStateManager.setResumeFlag();
            window.location.href = './index.html';
        }

        function startNewAssessment() {
            // Clear any existing progress and redirect
            assessmentStateManager.clearAssessmentState();
            window.location.href = './index.html';
        }

        // Load VALID360 data
        async function loadValid360Data() {
            // For demo, just show a placeholder
            const valid360Section = document.getElementById('valid360Section');
            if (valid360Section) {
                valid360Section.innerHTML = `
                    <div style="text-align: center; padding: 2rem; color: #6b7280;">
                        <h3>VALID360</h3>
                        <p>VALID360 functionality coming soon!</p>
                    </div>
                `;
            }
        }

        // Load team members
        async function loadTeamMembers() {
            // For demo, just show a placeholder
            const teamSection = document.getElementById('teamSection');
            if (teamSection) {
                teamSection.innerHTML = `
                    <div style="text-align: center; padding: 2rem; color: #6b7280;">
                        <h3>Team Members</h3>
                        <p>Team member management coming soon!</p>
                    </div>
                `;
            }
        }

        // Team Management - Global scope
        const teamMembers = [
            {
                id: 1,
                name: 'Sarah Johnson',
                email: 'sarah.johnson@company.com',
                department: 'Executive',
                role: 'CEO',
                assessments: 3,
                lastAssessment: '2024-01-15',
                status: 'active'
            },
            {
                id: 2,
                name: 'Michael Chen',
                email: 'michael.chen@company.com',
                department: 'IT',
                role: 'CTO',
                assessments: 2,
                lastAssessment: '2024-01-10',
                status: 'active'
            },
            {
                id: 3,
                name: 'Emily Rodriguez',
                email: 'emily.rodriguez@company.com',
                department: 'HR',
                role: 'HR Director',
                assessments: 4,
                lastAssessment: '2024-01-12',
                status: 'active'
            },
            {
                id: 4,
                name: 'David Kim',
                email: 'david.kim@company.com',
                department: 'Finance',
                role: 'CFO',
                assessments: 2,
                lastAssessment: '2024-01-08',
                status: 'active'
            },
            {
                id: 5,
                name: 'Lisa Thompson',
                email: 'lisa.thompson@company.com',
                department: 'Marketing',
                role: 'Marketing Manager',
                assessments: 1,
                lastAssessment: '2024-01-05',
                status: 'pending'
            }
        ];

        function loadTeamManagement() {
            const teamGrid = document.getElementById('teamGrid');
            const departmentGrid = document.getElementById('departmentGrid');
            
            // Load team members
            teamGrid.innerHTML = teamMembers.map(member => `
                <div class="team-member">
                    <div class="team-member-header">
                        <div class="member-avatar">${member.name.split(' ').map(n => n[0]).join('')}</div>
                        <div class="member-info">
                            <h4>${member.name}</h4>
                            <p>${member.role}</p>
                            <div class="member-department">${member.department}</div>
                        </div>
                    </div>
                    <div style="font-size: 0.75rem; color: #6b7280; margin-bottom: 0.5rem;">
                        ${member.assessments} assessments • Last: ${member.lastAssessment}
                    </div>
                    <div class="member-actions">
                        <button class="btn btn-tiny btn-secondary" onclick="viewMemberProfile(${member.id})">View</button>
                        <button class="btn btn-tiny btn-secondary" onclick="compareMember(${member.id})">Compare</button>
                        <button class="btn btn-tiny btn-secondary" onclick="editMember(${member.id})">Edit</button>
                    </div>
                </div>
            `).join('');
            
            // Load department overview
            const departments = getDepartmentStats();
            departmentGrid.innerHTML = departments.map(dept => `
                <div class="department-card">
                    <h4>${dept.name}</h4>
                    <div class="department-stats">
                        <div class="department-stat">
                            <div class="department-stat-number">${dept.members}</div>
                            <div class="department-stat-label">Members</div>
                        </div>
                        <div class="department-stat">
                            <div class="department-stat-number">${dept.assessments}</div>
                            <div class="department-stat-label">Assessments</div>
                        </div>
                        <div class="department-stat">
                            <div class="department-stat-number">${dept.avgCompletion}%</div>
                            <div class="department-stat-label">Completion</div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            updateTeamStats();
        }

        // getDepartmentStats
        function getDepartmentStats() {
            const deptStats = {};
            teamMembers.forEach(member => {
                if (!deptStats[member.department]) {
                    deptStats[member.department] = {
                        name: member.department,
                        members: 0,
                        assessments: 0,
                        avgCompletion: 0
                    };
                }
                deptStats[member.department].members++;
                deptStats[member.department].assessments += member.assessments;
            });
            // Calculate average completion (demo data)
            Object.values(deptStats).forEach(dept => {
                dept.avgCompletion = Math.floor(Math.random() * 30) + 70; // 70-100%
            });
            return Object.values(deptStats);
        }

        // updateTeamStats
        function updateTeamStats() {
            const totalMembers = teamMembers.length;
            const totalDepartments = new Set(teamMembers.map(m => m.department)).size;
            const totalAssessments = teamMembers.reduce((sum, m) => sum + m.assessments, 0);
            const avgCompletion = Math.floor(Math.random() * 20) + 80; // 80-100%
            
            const totalMembersEl = document.getElementById('totalMembers');
            const totalDepartmentsEl = document.getElementById('totalDepartments');
            const totalAssessmentsEl = document.getElementById('totalAssessments');
            const avgCompletionEl = document.getElementById('avgCompletion');
            
            if (totalMembersEl) totalMembersEl.textContent = totalMembers;
            if (totalDepartmentsEl) totalDepartmentsEl.textContent = totalDepartments;
            if (totalAssessmentsEl) totalAssessmentsEl.textContent = totalAssessments;
            if (avgCompletionEl) avgCompletionEl.textContent = avgCompletion + '%';
        }

        // filterTeamByDepartment
        window.filterTeamByDepartment = function() {
            const filter = document.getElementById('departmentFilter');
            if (!filter) return;
            
            const filterValue = filter.value;
            const teamGrid = document.getElementById('teamGrid');
            if (!teamGrid) return;
            
            const filteredMembers = filterValue ? teamMembers.filter(member => member.department === filterValue) : teamMembers;
            teamGrid.innerHTML = filteredMembers.map(member => `
                <div class="team-member">
                    <div class="team-member-header">
                        <div class="member-avatar">${member.name.split(' ').map(n => n[0]).join('')}</div>
                        <div class="member-info">
                            <h4>${member.name}</h4>
                            <p>${member.role}</p>
                            <div class="member-department">${member.department}</div>
                        </div>
                    </div>
                    <div style="font-size: 0.75rem; color: #6b7280; margin-bottom: 0.5rem;">
                        ${member.assessments} assessments • Last: ${member.lastAssessment}
                    </div>
                    <div class="member-actions">
                        <button class="btn btn-tiny btn-secondary" onclick="viewMemberProfile(${member.id})">View</button>
                        <button class="btn btn-tiny btn-secondary" onclick="compareMember(${member.id})">Compare</button>
                        <button class="btn btn-tiny btn-secondary" onclick="editMember(${member.id})">Edit</button>
                    </div>
                </div>
            `).join('');
        };

        // addTeamMember
        window.addTeamMember = function() {
            alert('Add Team Member functionality coming soon!');
        };

        // viewMemberProfile
        window.viewMemberProfile = function(memberId) {
            const member = teamMembers.find(m => m.id === memberId);
            if (member) {
                alert(`Viewing profile for ${member.name} (${member.department})`);
            }
        };

        // compareMember
        window.compareMember = function(memberId) {
            const member = teamMembers.find(m => m.id === memberId);
            if (member) {
                alert(`Compare results with ${member.name}`);
            }
        };
        
        window.editMember = function(memberId) {
            const member = teamMembers.find(m => m.id === memberId);
            if (member) {
                alert(`Edit ${member.name}'s information`);
            }
        }

        // Utility functions
        window.downloadReport = function(reportId) {
            alert('Download functionality coming soon!');
        };

        window.viewDocument = function(docId) {
            alert('View document functionality coming soon!');
        };

        window.deleteDocument = function(docId) {
            alert('Delete document functionality coming soon!');
        };

        // Initialize dashboard on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing dashboard...');
            
            // Check for demo user first
            const demoUser = localStorage.getItem('demoUser');
            if (demoUser) {
                // Demo user is already logged in, show dashboard directly
                showDashboard(JSON.parse(demoUser));
                
                // Load assessment progress
                loadAssessmentProgress();
            } else {
                // No user logged in, show login screen
                showLogin();
            }
            
            // Set up navigation event listeners
            const navLinks = document.querySelectorAll('.nav-item');
            navLinks.forEach(link => {
                const sectionId = link.getAttribute('data-section');
                if (sectionId) {
                    link.removeAttribute('onclick');
                    link.addEventListener('click', function(e) {
                        e.preventDefault();
                        console.log('Nav link clicked:', this.textContent.trim(), 'Section:', sectionId);
                        window.showSection(sectionId);
                    });
                }
            });
            
            // Restore the section from URL hash
            restoreSectionFromHash();
        });

        // Load assessment progress
        async function loadAssessmentProgress() {
            try {
                const progress = assessmentStateManager.getAssessmentProgress();
                const hasIncomplete = assessmentStateManager.hasIncompleteAssessment();
                const hasCompleted = assessmentStateManager.hasCompletedAssessments();
                
                const progressSection = document.getElementById('assessmentProgress');
                const resultsSection = document.getElementById('assessmentResults');
                const startButton = document.querySelector('button[onclick="startNewAssessment()"]');
                const resumeButton = document.querySelector('button[onclick="resumeAssessment()"]');
                
                if (hasIncomplete && progress) {
                    // Show progress section
                    progressSection.style.display = 'block';
                    resultsSection.style.display = 'none';
                    
                    // Update progress info
                    const questionsCompletedEl = document.getElementById('questionsCompleted');
                    const totalQuestionsEl = document.getElementById('totalQuestions');
                    const progressBarEl = document.getElementById('progressBar');
                    
                    if (questionsCompletedEl) questionsCompletedEl.textContent = progress.answeredQuestions;
                    if (totalQuestionsEl) totalQuestionsEl.textContent = progress.totalQuestions;
                    if (progressBarEl) {
                        progressBarEl.style.width = progress.progress + '%';
                        progressBarEl.setAttribute('aria-valuenow', progress.progress);
                    }
                    
                    // Show resume button, hide start new
                    if (resumeButton) resumeButton.style.display = 'inline-flex';
                    if (startButton) startButton.style.display = 'inline-flex';
                    
                } else if (hasCompleted) {
                    // Show results section
                    progressSection.style.display = 'none';
                    resultsSection.style.display = 'block';
                    
                    // Load and display results
                    await loadAssessmentResults();
                    
                    // Show start new button, hide resume
                    if (resumeButton) resumeButton.style.display = 'none';
                    if (startButton) startButton.style.display = 'inline-flex';
                    
                } else {
                    // No assessment history
                    progressSection.style.display = 'none';
                    resultsSection.style.display = 'none';
                    
                    // Show start new button, hide resume
                    if (resumeButton) resumeButton.style.display = 'none';
                    if (startButton) startButton.style.display = 'inline-flex';
                }
                
            } catch (error) {
                console.error('Error loading assessment progress:', error);
            }
        }

        // Load assessment results
        async function loadAssessmentResults() {
            try {
                const results = assessmentStateManager.loadAssessmentResults();
                const resultsSection = document.getElementById('assessmentResults');
                
                if (results.length === 0) {
                    resultsSection.innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: #6b7280;">
                            <h3>No Results Yet</h3>
                            <p>Complete your first VALID assessment to see your results here.</p>
                        </div>
                    `;
                    return;
                }
                
                // Show most recent result
                const latestResult = results[results.length - 1];
                const completedDate = new Date(latestResult.completedAt).toLocaleDateString();
                
                resultsSection.innerHTML = `
                    <div class="dashboard-card">
                        <div class="card-header">
                            <h3 class="card-title">Latest Assessment Results</h3>
                            <span style="color: #6b7280; font-size: 0.875rem;">Completed: ${completedDate}</span>
                        </div>
                        <div class="card-content">
                            <div class="results-summary">
                                <div class="result-item">
                                    <h4>Primary Style</h4>
                                    <p>${latestResult.persona?.primary || 'N/A'}</p>
                                </div>
                                <div class="result-item">
                                    <h4>Secondary Style</h4>
                                    <p>${latestResult.persona?.secondary || 'N/A'}</p>
                                </div>
                                <div class="result-item">
                                    <h4>Development Area</h4>
                                    <p>${latestResult.development?.area || 'N/A'}</p>
                                </div>
                            </div>
                            <div style="margin-top: 1rem;">
                                <button class="btn btn-secondary" onclick="viewDetailedResults()">
                                    <i class="fas fa-chart-bar"></i>
                                    View Detailed Results
                                </button>
                                <button class="btn btn-secondary" onclick="downloadResults()">
                                    <i class="fas fa-download"></i>
                                    Download Report
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
            } catch (error) {
                console.error('Error loading assessment results:', error);
            }
        }

        function resumeAssessment() {
            // Set resume flag and redirect to assessment
            assessmentStateManager.setResumeFlag();
            window.location.href = './index.html';
        }

        function startNewAssessment() {
            // Clear any existing progress and redirect
            assessmentStateManager.clearAssessmentState();
            window.location.href = './index.html';
        }

        // View detailed results
        function viewDetailedResults() {
            // For now, redirect to results page
            window.location.href = './results.html';
        }

        // Download results
        function downloadResults() {
            const results = assessmentStateManager.loadAssessmentResults();
            if (results.length === 0) {
                alert('No results available to download');
                return;
            }
            
            const latestResult = results[results.length - 1];
            const dataStr = JSON.stringify(latestResult, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `VALID-assessment-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
        }

        // Initialize dashboard
        async function initializeDashboard() {
            try {
                // Check if user is logged in
                const demoUser = localStorage.getItem('demoUser');
                if (!demoUser) {
                    // Show login screen
                    showLogin();
                    return;
                }

                // Load user data
                await loadUserData();
                
                // Load assessment progress
                await loadAssessmentProgress();
                
                // Load other sections
                await loadValid360Data();
                await loadTeamManagement();
                await loadReports();
                
                // Show dashboard
                showDashboard();
                
            } catch (error) {
                console.error('Error initializing dashboard:', error);
            }
        }

        // Initialize dashboard when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeDashboard();
        });

        // Load user data
        async function loadUserData() {
            try {
                const demoUser = localStorage.getItem('demoUser');
                if (demoUser) {
                    const user = JSON.parse(demoUser);
                    const userEmailEl = document.getElementById('userEmail');
                    if (userEmailEl) {
                        userEmailEl.textContent = user.email;
                    }
                }
            } catch (error) {
                console.error('Error loading user data:', error);
            }
        }

        // Load reports
        async function loadReports() {
            try {
                const reportsPlaceholder = document.getElementById('reportsPlaceholder');
                const reportsTable = document.getElementById('reportsTable');
                
                if (reportsPlaceholder) {
                    reportsPlaceholder.innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: #6b7280;">
                            <h3>No Reports Yet</h3>
                            <p>Complete assessments to see your reports here.</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading reports:', error);
            }
        }
    </script>
    <script src="js/dev-env.js"></script>
    <script type="module" src="js/gamification.js"></script>
</body>
</html> 